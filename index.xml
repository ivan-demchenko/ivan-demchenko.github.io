<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ivan's blog</title><link>https://raqystyle.github.io/</link><description>Recent content on Ivan's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 09 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://raqystyle.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>The Importance of Jobs to be Done Framework in Software Development</title><link>https://raqystyle.github.io/blog/jtbd-in-software/</link><pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/jtbd-in-software/</guid><description>As computer programmers, it&amp;rsquo;s easy to get carried away into the vast and interesting world of software engineering. However, we must remember that people use computers as a means to an end, they need to get their jobs done. Despite having endless possibilities of all the features we can build, it&amp;rsquo;s important to stay focused and true to the needs of our users.
This is where the Jobs to be Done (JTBD) framework comes in.</description></item><item><title>Simplifying Onboarding with Docker</title><link>https://raqystyle.github.io/blog/docker-for-onboarding/</link><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/docker-for-onboarding/</guid><description>Onboarding new team members can be a time-consuming and complicated process, especially when it comes to ensuring they have the right software and tools to do their jobs.
Traditional onboarding documentation can be unreliable and quickly outdated. In addition, IT professionals need to keep the device fleet up to date and free of vulnerabilities. Relying on others to maintain the documentation is often unsuccessful, as people tend to disregard updating documentation as a non-essential task.</description></item><item><title>Developers, engineers, architects... who's who?</title><link>https://raqystyle.github.io/blog/develop-engineer-architect/</link><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/develop-engineer-architect/</guid><description>Lately, I wondered if there is a difference between a software engineer and a software developer. I tried to draw some similarities between the software and construction industries. Both have architects, developers and engineers. So, how come, a software developer can become a software architect, while it is pretty hard to imagine a construction worker becoming an architect just by accruing experience and attending a few online courses?
This situation bothered me, especially after observing several software projects that had become hard to maintain and develop due to poor engineering or architectural decisions.</description></item><item><title>Interfaces, good and bad</title><link>https://raqystyle.github.io/blog/interfaces-good-bad/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/interfaces-good-bad/</guid><description>Designing applications can be a challenging task. Over the course of my career, I have developed a few guiding principles that I would like to share with you. These are more food for thought, rather than hard rules to follow.
Throughout this article, I use adjectives like &amp;ldquo;good&amp;rdquo; and &amp;ldquo;bad&amp;rdquo; - purely subjectively.
Why do we need interfaces? Public interfaces provide an overview of the capabilities of the module. If an interface and its methods have descriptive names (defined later), that interface can be a valuable addition to the documentation.</description></item><item><title>Dependencies on (front-end) frameworks</title><link>https://raqystyle.github.io/blog/dependencies-on-frontend-frameworks/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/dependencies-on-frontend-frameworks/</guid><description>As modern front-end applications become increasingly complex, it is becoming more and more important to maintain the separation of concerns between the view layer and the business logic.
New toys, old problems Having seen several modern codebases, I can say that history is repeating itself. Back in the day, when PHP was growing in popularity, but the ecosystem was not mature enough, the separation of concerns was a hot topic. For example, rushing to deliver the working code on time, people would query or write to a database directly from the views.</description></item><item><title>Is JavaScript OOP or Functional?</title><link>https://raqystyle.github.io/blog/is-js-oop-or-functional/</link><pubDate>Wed, 31 Aug 2022 12:33:54 +0200</pubDate><guid>https://raqystyle.github.io/blog/is-js-oop-or-functional/</guid><description>A colleague of mine asked a good question: does TypeScript make JavaScript a better OOP language? To answer this question, I decided to compare OOP JavaScript to its opposite, Functional JavaScript.
TypeScript has become crazy popular. Many people bet on it as a magical language that will solve their JavaScript problems. Well, it won&amp;rsquo;t. As Kyle Simpson described in his upcoming book, the quirks of JavaScript don&amp;rsquo;t disappear. In my opinion, we should not attribute any superpowers to TS apart from just helping developers to feel more confident in the larger codebase.</description></item><item><title>Use Tailwind as CSS abstraction in CSS modules</title><link>https://raqystyle.github.io/blog/use-tailwind-with-abstration/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/use-tailwind-with-abstration/</guid><description>Tailwind provides a solid base level, sort of a starting point for your application. The library is a set of utility CSS classes that use Custom CSS properties (a.k.a CSS variables). Some of these variables abstract away a default set of design tokens. As such, it is easy to create a dark theme (should a user prefer dark mode) or take some accessibility aspect into account (like reduced animations). I only described the tip of the iceberg.</description></item><item><title>Design Systems as a layered cake</title><link>https://raqystyle.github.io/blog/layered-cake-ds/</link><pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/layered-cake-ds/</guid><description>How do we structure a Design System? How do we make sure the architecture allows more people to contribute to it? What if there&amp;rsquo;s already a Design System in place, but it doesn&amp;rsquo;t work? During my time at Personio, I participated in the process of re-thinking the existing Design System. I noticed that dissecting the system into layers helped us answer some tricky questions. So, bear with me.
How it all starts In my experience, design systems always come after the main Product.</description></item><item><title>UI library as a mono-repository. Part 3</title><link>https://raqystyle.github.io/blog/ui-lib-monorepo-part3/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/ui-lib-monorepo-part3/</guid><description>As we progressed with our mono-repository endeavour, we noticed some weird behaviour. It worked like charm in the apps. But not in our Storybook. Besides, sometimes tests would fail for no obvious reason.
Storybook is a de-facto standard tool for developing and demonstrating your components in action in the real environment. We also used Jest for testing. So, naturally, we didn&amp;rsquo;t want to give them up. Seems like our setup is not finished yet.</description></item><item><title>UI library as a mono-repository. Part 2</title><link>https://raqystyle.github.io/blog/ui-lib-monorepo-part2/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/ui-lib-monorepo-part2/</guid><description>Let&amp;rsquo;s talk about CSS files and modules. Unfortunately, they are often treated as if they were a second class entities. We need to fix this situation.
Treating CSS dependencies the way we treat other dependencies Let&amp;rsquo;s talk about the dependencies between UI components.
In JS files, we mark dependencies by import-ing or require-ing them. Packages clearly define dependencies in the package.json file. But a package is not only JS files, but also CSS files.</description></item><item><title>UI library as a mono-repository. Part 1</title><link>https://raqystyle.github.io/blog/ui-lib-monorepo-part1/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/ui-lib-monorepo-part1/</guid><description>Welcome to the first instalment of the series dedicated to the re-architecture of a UI library. I helped my company to transition from the monolithic setup to a mono-repository by leading this project.
This is all very familiar It seems like this is a common topic these days: Deprecate monoliths and move toward micro-frontend/micro-service architecture.
However, many UI libraries start as a monolith. Meaning, there&amp;rsquo;s a single distribution for the whole library.</description></item><item><title>Consider note-taking, you won't regret</title><link>https://raqystyle.github.io/blog/the-importance-of-note-taking/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/the-importance-of-note-taking/</guid><description>TL;DR: keep track of your thoughts and ideas.
In our lives, we consume tons of information, have heaps of various experiences and, generally, learn a lot. We read books, watch videos, attend lectures, listen to podcasts, etc. In other words, we consume the ideas and thoughts of other people.
Mine vs others' However, sometimes, we make our own discoveries. It could happen during a conversation with your colleague about a book we&amp;rsquo;re reading.</description></item><item><title>Life is too short to complain about bad decisions of other people</title><link>https://raqystyle.github.io/blog/complaining-about-decisions/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/complaining-about-decisions/</guid><description>One morning, taking a cold shower (against my will) a thought crossed my mind. I realised how complaining about the absence of hot water due to my landlord&amp;rsquo;s decisions is similar to what I have been hearing from software engineers.
(Yes, ideas come during taking shower)
It all started in July 2021. I received an email from my landlord saying something along the lines of &amp;ldquo;I decided to replace the hearing system so that we all benefit from less emission and less costs&amp;rdquo;.</description></item><item><title>Generating a power set of a set</title><link>https://raqystyle.github.io/blog/generating-a-power-set-of-a-set/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/generating-a-power-set-of-a-set/</guid><description>There&amp;rsquo;s a class of problems that deal with subsets, permutations and so on. Let&amp;rsquo;s find a way to generate a power set of a set with distinct elements. This is a problem #78 on LeetCode.
What is backtracking? According to Wikipedia, backtracking is a general algorithm (or an idea) of searching all the solutions by reducing the search space. It&amp;rsquo;s really close to brute force, try all the options. But at some point we need to take a step back (backtrack) if we cannot proceed.</description></item><item><title>Variadic attributes with TypeScripts Discriminated Unions</title><link>https://raqystyle.github.io/blog/variadic-attributes-with-typescripts-discriminated-unions/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/variadic-attributes-with-typescripts-discriminated-unions/</guid><description>Sometimes, we need to create a component that serves multiple use-cases. As such, depending on some key attribute, the set of all others might differ. One example is a date picker component. Let&amp;rsquo;s see how we can implement it.
Imagine our date picker should allow a consumer to select a single date of a range of dates. Let&amp;rsquo;s try to visualise such use-cases:
&amp;lt;DatePicker onChange={handleOnChange} theDate={someDate} /&amp;gt; &amp;lt;DatePicker mode=&amp;#34;range&amp;#34; onStartDateChange={handleStartDateChange} onEndDateChange={handleEndDateChange} startDate={someStartDate} endDate={someEndDate} /&amp;gt; We can describe such behaviour in types like this:</description></item><item><title>Why knowing the interview structure matters?</title><link>https://raqystyle.github.io/blog/why-knowing-the-interview-structure-matters/</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/why-knowing-the-interview-structure-matters/</guid><description>An interview is a bidirectional process, ideally. However, most of the time, companies spend as much time as they consider necessary questioning candidates while giving a few-minutes-long opportunity for a candidate to find out more about the company or the culture or a team the candidate might be working with. I believe this is unfair.
This approach may also introduce problems in the future after the candidate has become an employee.</description></item><item><title>Monads and JavaScript</title><link>https://raqystyle.github.io/blog/monads-and-javascript/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/monads-and-javascript/</guid><description>There are countless articles that aim to describe what monads are. Sure, I can’t resist writing another one of my own.
Stepping into contexts In order to understand what monad is, however, we should start with a Functor. The classical analogy for a functor is a box. The value sits inside that box. The only way to interact with that value is to use map function. Here is the signature for map:</description></item><item><title>Handle keyboard input in Elm</title><link>https://raqystyle.github.io/blog/handle-keyboard-input-in-elm/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/handle-keyboard-input-in-elm/</guid><description>Often we need to perform certain actions as a feedback to the input from the keyboard. For example, when we need to navigate within a list up and down or perform an action when the meta key (alt or shift) is pressed.
Binding messages to keys The most natural and convenient way to specify which action must be performed when a key is pressed is to use a dictionary. We going to use a list of tuples of key codes plus messages.</description></item><item><title>Implementation of function composition using spread operator and fat-arrow syntax</title><link>https://raqystyle.github.io/blog/implementation-of-function-composition-using-spread-operator-and-fat-arrow-syntax/</link><pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/implementation-of-function-composition-using-spread-operator-and-fat-arrow-syntax/</guid><description>In this note, I would like to present my implementation of the function that performs function composition. We’re going to use spread operator and fat-arrow functions.
First of all, it is not about writing shorter code or hacking around so that nobody understands it afterwards. If you are not familiar with this new syntax, you might find these two articles useful: fat-arrow functions and spread syntax.
I’ll start with the initial, &amp;ldquo;old-school&amp;rdquo; implementation of comp function:</description></item><item><title>One more way to implement a carousel</title><link>https://raqystyle.github.io/blog/one-more-way-to-implement-a-carousel/</link><pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/one-more-way-to-implement-a-carousel/</guid><description>There are lots of implementations of it: jQuery based, vanilla-js based, heavy and lightweight. Some even claim that their solution is the only one you might ever need. However, there will always be a situation when the existing solution simply doesn’t work.
Here, at AutoScout24 we just had such situation and we decided to implement our own Carousel. We called it showcar-carousel. Please, do not hesitate to check the code out on GitHub repo for showcar-carousel.</description></item><item><title/><link>https://raqystyle.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/about/</guid><description>About me Hi, I&amp;rsquo;m Ivan. I love building web apps and working with great people! I am Ukrainian, but currently, I reside in Germany; I also spent a few fantastic years with my family in Australia.
You are very welcome to checkout my LinkedIn and GitHub profiles.
A bit of nostalgia I got my first computer when I was at 10th grade (children in Ukraine go to school for 12 years).</description></item><item><title/><link>https://raqystyle.github.io/bookmarks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/bookmarks/</guid><description>Bookmarks Here is my collection of different resources that helped me in the past with my self-study process. It strikes and inspires me, every time when I think about these people who gave all of these great materials to the public for free. What a contribution!
Bartosz Milewski‘s Category theory playlists. His blog and videos on Category Theory are priceless! Part 1 Part 2 Part 3 Tom Harding‘s collection on Fantasy Land specification for JavaScript.</description></item><item><title/><link>https://raqystyle.github.io/cv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/cv/</guid><description>CV</description></item></channel></rss>