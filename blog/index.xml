<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blogs on Ivan's blog</title><link>https://ivan-demchenko.github.io/blog/</link><description>Recent content in Blogs on Ivan's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://ivan-demchenko.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Remote Data as Data</title><link>https://ivan-demchenko.github.io/blog/remote-data-as-data/</link><pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/remote-data-as-data/</guid><description>Today I want to talk about an interesting (though not new) idea for representing remote resources. In fact, any resource that takes some time to retrieve. But most often we talk about network resources. At the same time, we&amp;rsquo;re going to do a bit of TypeScript gymnastics.
Data type for side effects The state of a remote resource can be represented in four ways:
Idle - we haven&amp;rsquo;t even requested the resource yet Loading - we have requested the resource, but the operation is not yet complete Ready&amp;lt;D&amp;gt; - we have the data Error&amp;lt;E&amp;gt; - something has gone wrong So, using a discriminated union feature of TypeScript, we can create a type for this situation:</description></item><item><title>Interview the right way</title><link>https://ivan-demchenko.github.io/blog/empathy-in-interviews/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/empathy-in-interviews/</guid><description>I&amp;rsquo;ve wanted to touch on this topic for a long time. Mainly because it aligns with a value I respect a lot.
Interviews. Specifically, technical coding interviews.
Let&amp;rsquo;s put on our engineering hats and think of an interview as a solution to a problem. The problem is a lack of the right person in a team. The solution is to hire that person through a series of tests. We know that solutions should be tested, but how do we test our approach to technical interviews?</description></item><item><title>Why I chose Elm for my side project</title><link>https://ivan-demchenko.github.io/blog/why-elm-is-language-of-choice/</link><pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/why-elm-is-language-of-choice/</guid><description>I built a browser extension using Elm - GoalMet - Achieve your goals. Even though Elm&amp;rsquo;s evolution is rather slow, the JS community can learn heaps from this wonderful language and its ecosystem. Here are the main reasons why I chose Elm for my side project.
Stable ecosystem Everything I learned about Elm 2-3 years ago still applies. Even though I used Elm for anything substantial around two years ago, I could jump in and be productive immediately.</description></item><item><title>The story of Boeing as a lesson for us all</title><link>https://ivan-demchenko.github.io/blog/the-story-of-boeing-as-a-lesson-for-us-all/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/the-story-of-boeing-as-a-lesson-for-us-all/</guid><description>During one of my interviews in late 2023 - early 2024, a person asked me: &amp;ldquo;Who cares about the language we choose or frameworks or type system&amp;hellip; all that matters is a working product&amp;rdquo;. I wrote about it already, but I used a clumsy analogy with building a house. Recently, however, the internet (or at least, the algorithms that take care of my YouTube feed) started buzzing with news about the problems at Boeing.</description></item><item><title>CSS-only is still very powerful</title><link>https://ivan-demchenko.github.io/blog/css-only-is-power/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/css-only-is-power/</guid><description>It seems that these days, at times of React (and similar frameworks), CSS receives less attention. However, I remember a not-so-distant past, perhaps, five years ago, when using CSS for simple UI elements was the desired approach. True, it has its limitations. But I don&amp;rsquo;t think we can discard CSS completely and rely on JavaScript driving even the most trivial elements of UI.
By applying (or at least trying to apply) the CSS-first approach, we can achieve some great results without necessarily relying on JavaScript.</description></item><item><title>Who cares about the underlying tech? Why bother?</title><link>https://ivan-demchenko.github.io/blog/who-cares-about-the-underlying-tech/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/who-cares-about-the-underlying-tech/</guid><description>I recently had a conversation about why I insist that JavaScript (and especially TypeScript) developers should learn from Rescript, Elm, Go, Rust, and other languages. A person asked me: &amp;ldquo;Who cares? Users don&amp;rsquo;t care what language you use to build your product. Often the business doesn&amp;rsquo;t care either! There are plenty of companies with tons of spaghetti code, and they sell their products well! So why bother?&amp;rdquo;
Well, I couldn&amp;rsquo;t spontaneously say why I care.</description></item><item><title>Model errors as data for better user and developer experience</title><link>https://ivan-demchenko.github.io/blog/models-errors-as-data/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/models-errors-as-data/</guid><description>A great product experience is when the product works as expected in the scenario it was designed for, and communicates with users in a meaningful way. As developers, we cannot control how and where our product will be used, or the user input. But we have the tools to guard the flow from unexpected inputs. In this post, I want to give two pieces of advice for people working in the JS ecosystem on how to create better programs.</description></item><item><title>JavaScript is not viable any more</title><link>https://ivan-demchenko.github.io/blog/js-is-not-viable-anymore/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/js-is-not-viable-anymore/</guid><description>JavaScript is a dominant language for building web applications. I&amp;rsquo;ve been using it for a very long time. However, in my opinion, it just doesn&amp;rsquo;t cut it any more. Luckily, there are some compelling alternatives.
JavaScript: A Dominant Yet Flawed Language JavaScript offers a quick and cheap solution for building web applications in the short term. However, in the long run, its design quirks and inherent flaws will work against its users.</description></item><item><title>TypeScript inherits all the flaws of JavaScript</title><link>https://ivan-demchenko.github.io/blog/js-and-ts-are-flawed-languages/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/js-and-ts-are-flawed-languages/</guid><description>Being a big proponent of TypeScript, I keep noticing that this language inherits all the flaws of JavaScript. However, it does not mean we have no choice.
The problem Consider a function that turns an object representing a URL into a string:
type UrlRecord = { protocol: string; host: string[]; } function urlToString(urlRecord: UrlRecord): string { const { protocol, host } = urlRecord; return `${protocol}://${host.join(&amp;#39;.&amp;#39;)}`; } This code snippet looks innocent and pretty solid.</description></item><item><title>The Freedom of Web Components or Why UI Libraries Should Embrace Framework-Agnostic Solutions</title><link>https://ivan-demchenko.github.io/blog/web-components-for-ui-lib/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/web-components-for-ui-lib/</guid><description>In the ever-evolving landscape of web development, the choice of tools and technologies can have a profound impact on the flexibility, scalability, and longevity of a code base. One critical decision that developers often face is whether to use a framework or embrace more framework-agnostic solutions like Web Components when building a UI library. In this post, we&amp;rsquo;ll explore why opting for Web Components can offer unparalleled advantages when it comes to ensuring flexibility and avoiding lock-in.</description></item><item><title>Common mistakes when using TypeScript</title><link>https://ivan-demchenko.github.io/blog/common-mistakes-when-using-typescript/</link><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/common-mistakes-when-using-typescript/</guid><description>I chose the railway photo for the cover for a reason. TypeScript as a type system has many powerful and unique features. But people often do not know about them or neglect them. In this post, I want to highlight some common escape hatches that people use and why they make TypeScript feel like bloated JavaScript.
More often than not, we use TypeScript as bloated JavaScript. For example,
{ options: Record&amp;lt;string, string&amp;gt; } I would argue that this is why people keep saying that TypeScript doesn&amp;rsquo;t add much value.</description></item><item><title>The Importance of Jobs to be Done Framework in Software Development</title><link>https://ivan-demchenko.github.io/blog/jtbd-in-software/</link><pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/jtbd-in-software/</guid><description>As computer programmers, it&amp;rsquo;s easy to get carried away into the vast and interesting world of software engineering. However, we must remember that people use computers as a means to an end, they need to get their jobs done. Despite having endless possibilities of all the features we can build, it&amp;rsquo;s important to stay focused and true to the needs of our users.
This is where the Jobs to be Done (JTBD) framework comes in.</description></item><item><title>Simplifying Onboarding with Docker</title><link>https://ivan-demchenko.github.io/blog/docker-for-onboarding/</link><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/docker-for-onboarding/</guid><description>Onboarding new team members can be a time-consuming and complicated process, especially when it comes to ensuring they have the right software and tools to do their jobs.
Traditional onboarding documentation can be unreliable and quickly outdated. In addition, IT professionals need to keep the device fleet up to date and free of vulnerabilities. Relying on others to maintain the documentation is often unsuccessful, as people tend to disregard updating documentation as a non-essential task.</description></item><item><title>Developers, engineers, architects... who's who?</title><link>https://ivan-demchenko.github.io/blog/develop-engineer-architect/</link><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/develop-engineer-architect/</guid><description>Lately, I wondered if there is a difference between a software engineer and a software developer. I tried to draw some similarities between the software and construction industries. Both have architects, developers and engineers. So, how come, a software developer can become a software architect, while it is pretty hard to imagine a construction worker becoming an architect just by accruing experience and attending a few online courses?
This situation bothered me, especially after observing several software projects that had become hard to maintain and develop due to poor engineering or architectural decisions.</description></item><item><title>Interfaces, good and bad</title><link>https://ivan-demchenko.github.io/blog/interfaces-good-bad/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/interfaces-good-bad/</guid><description>Designing applications can be a challenging task. Over the course of my career, I have developed a few guiding principles that I would like to share with you. These are more food for thought, rather than hard rules to follow.
Throughout this article, I use adjectives like &amp;ldquo;good&amp;rdquo; and &amp;ldquo;bad&amp;rdquo; - purely subjectively.
Why do we need interfaces? Public interfaces provide an overview of the capabilities of the module. If an interface and its methods have descriptive names (defined later), that interface can be a valuable addition to the documentation.</description></item><item><title>Dependencies on (front-end) frameworks</title><link>https://ivan-demchenko.github.io/blog/dependencies-on-frontend-frameworks/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/dependencies-on-frontend-frameworks/</guid><description>As modern front-end applications become increasingly complex, it is becoming more and more important to maintain the separation of concerns between the view layer and the business logic.
New toys, old problems Having seen several modern codebases, I can say that history is repeating itself. Back in the day, when PHP was growing in popularity, but the ecosystem was not mature enough, the separation of concerns was a hot topic. For example, rushing to deliver the working code on time, people would query or write to a database directly from the views.</description></item><item><title>Is JavaScript OOP or Functional?</title><link>https://ivan-demchenko.github.io/blog/is-js-oop-or-functional/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/is-js-oop-or-functional/</guid><description>A colleague of mine asked a good question: does TypeScript make JavaScript a better OOP language? To answer this question, I decided to compare OOP JavaScript to its opposite, Functional JavaScript.
TypeScript has become crazy popular. Many people bet on it as a magical language that will solve their JavaScript problems. Well, it won&amp;rsquo;t. As Kyle Simpson described in his upcoming book, the quirks of JavaScript don&amp;rsquo;t disappear. In my opinion, we should not attribute any superpowers to TS apart from just helping developers to feel more confident in the larger codebase.</description></item><item><title>Use Tailwind as CSS abstraction in CSS modules</title><link>https://ivan-demchenko.github.io/blog/use-tailwind-with-abstraction/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/use-tailwind-with-abstraction/</guid><description>Tailwind provides a solid base level, sort of a starting point for your application. The library is a set of utility CSS classes that use Custom CSS properties (a.k.a CSS variables). Some of these variables abstract away a default set of design tokens. As such, it is easy to create a dark theme (should a user prefer dark mode) or take some accessibility aspect into account (like reduced animations). I only described the tip of the iceberg.</description></item><item><title>Design Systems as a layered cake</title><link>https://ivan-demchenko.github.io/blog/layered-cake-ds/</link><pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/layered-cake-ds/</guid><description>How do we structure a Design System? How do we make sure the architecture allows more people to contribute to it? What if there&amp;rsquo;s already a Design System in place, but it doesn&amp;rsquo;t work? During my time at Personio, I participated in the process of re-thinking the existing Design System. I noticed that dissecting the system into layers helped us answer some tricky questions. So, bear with me.
How it all starts In my experience, design systems always come after the main Product.</description></item><item><title>UI library as a mono-repository. Part 3</title><link>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part3/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part3/</guid><description>As we progressed with our mono-repository endeavour, we noticed some weird behaviour. It worked like charm in the apps. But not in our Storybook. Besides, sometimes tests would fail for no obvious reason.
Storybook is a de-facto standard tool for developing and demonstrating your components in action in the real environment. We also used Jest for testing. So, naturally, we didn&amp;rsquo;t want to give them up. Seems like our setup is not finished yet.</description></item><item><title>UI library as a mono-repository. Part 2</title><link>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part2/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part2/</guid><description>Let&amp;rsquo;s talk about CSS files and modules. Unfortunately, they are often treated as if they were a second class entities. We need to fix this situation.
Treating CSS dependencies the way we treat other dependencies Let&amp;rsquo;s talk about the dependencies between UI components.
In JS files, we mark dependencies by import-ing or require-ing them. Packages clearly define dependencies in the package.json file. But a package is not only JS files, but also CSS files.</description></item><item><title>UI library as a mono-repository. Part 1</title><link>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part1/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part1/</guid><description>Welcome to the first instalment of the series dedicated to the re-architecture of a UI library. I helped my company to transition from the monolithic setup to a mono-repository by leading this project.
This is all very familiar It seems like this is a common topic these days: Deprecate monoliths and move toward micro-frontend/micro-service architecture.
However, many UI libraries start as a monolith. Meaning, there&amp;rsquo;s a single distribution for the whole library.</description></item><item><title>Consider note-taking, you won't regret</title><link>https://ivan-demchenko.github.io/blog/the-importance-of-note-taking/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/the-importance-of-note-taking/</guid><description>TL;DR: keep track of your thoughts and ideas.
In our lives, we consume tons of information, have heaps of various experiences and, generally, learn a lot. We read books, watch videos, attend lectures, listen to podcasts, etc. In other words, we consume the ideas and thoughts of other people.
Mine vs others' However, sometimes, we make our own discoveries. It could happen during a conversation with your colleague about a book we&amp;rsquo;re reading.</description></item><item><title>Life is too short to complain about bad decisions of other people</title><link>https://ivan-demchenko.github.io/blog/complaining-about-decisions/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/complaining-about-decisions/</guid><description>One morning, taking a cold shower (against my will) a thought crossed my mind. I realised how complaining about the absence of hot water due to my landlord&amp;rsquo;s decisions is similar to what I have been hearing from software engineers.
(Yes, ideas come during taking shower)
It all started in July 2021. I received an email from my landlord saying something along the lines of &amp;ldquo;I decided to replace the hearing system so that we all benefit from less emission and less costs&amp;rdquo;.</description></item><item><title>Generating a power set of a set</title><link>https://ivan-demchenko.github.io/blog/generating-a-power-set-of-a-set/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/generating-a-power-set-of-a-set/</guid><description>There&amp;rsquo;s a class of problems that deal with subsets, permutations and so on. Let&amp;rsquo;s find a way to generate a power set of a set with distinct elements. This is a problem #78 on LeetCode.
What is backtracking? According to Wikipedia, backtracking is a general algorithm (or an idea) of searching all the solutions by reducing the search space. It&amp;rsquo;s really close to brute force, try all the options. But at some point we need to take a step back (backtrack) if we cannot proceed.</description></item><item><title>Variadic attributes with TypeScripts Discriminated Unions</title><link>https://ivan-demchenko.github.io/blog/variadic-attributes-with-typescripts-discriminated-unions/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/variadic-attributes-with-typescripts-discriminated-unions/</guid><description>Sometimes, we need to create a component that serves multiple use-cases. As such, depending on some key attribute, the set of all others might differ. One example is a date picker component. Let&amp;rsquo;s see how we can implement it.
Imagine our date picker should allow a consumer to select a single date of a range of dates. Let&amp;rsquo;s try to visualise such use-cases:
&amp;lt;DatePicker onChange={handleOnChange} theDate={someDate} /&amp;gt; &amp;lt;DatePicker mode=&amp;#34;range&amp;#34; onStartDateChange={handleStartDateChange} onEndDateChange={handleEndDateChange} startDate={someStartDate} endDate={someEndDate} /&amp;gt; We can describe such behaviour in types like this:</description></item><item><title>Why knowing the interview structure matters?</title><link>https://ivan-demchenko.github.io/blog/why-knowing-the-interview-structure-matters/</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/why-knowing-the-interview-structure-matters/</guid><description>An interview is a bidirectional process, ideally. However, most of the time, companies spend as much time as they consider necessary questioning candidates while giving a few-minutes-long opportunity for a candidate to find out more about the company or the culture or a team the candidate might be working with. I believe this is unfair.
This approach may also introduce problems in the future after the candidate has become an employee.</description></item><item><title>Monads and JavaScript</title><link>https://ivan-demchenko.github.io/blog/monads-and-javascript/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/monads-and-javascript/</guid><description>There are countless articles that aim to describe what monads are. Sure, I can’t resist writing another one of my own.
Stepping into contexts In order to understand what monad is, however, we should start with a Functor. The classical analogy for a functor is a box. The value sits inside that box. The only way to interact with that value is to use map function. Here is the signature for map:</description></item><item><title>Handle keyboard input in Elm</title><link>https://ivan-demchenko.github.io/blog/handle-keyboard-input-in-elm/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/handle-keyboard-input-in-elm/</guid><description>Often we need to perform certain actions as a feedback to the input from the keyboard. For example, when we need to navigate within a list up and down or perform an action when the meta key (alt or shift) is pressed.
Binding messages to keys The most natural and convenient way to specify which action must be performed when a key is pressed is to use a dictionary. We going to use a list of tuples of key codes plus messages.</description></item><item><title>Implementation of function composition using spread operator and fat-arrow syntax</title><link>https://ivan-demchenko.github.io/blog/implementation-of-function-composition-using-spread-operator-and-fat-arrow-syntax/</link><pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/implementation-of-function-composition-using-spread-operator-and-fat-arrow-syntax/</guid><description>In this note, I would like to present my implementation of the function that performs function composition. We’re going to use spread operator and fat-arrow functions.
First of all, it is not about writing shorter code or hacking around so that nobody understands it afterwards. If you are not familiar with this new syntax, you might find these two articles useful: fat-arrow functions and spread syntax.
I’ll start with the initial, &amp;ldquo;old-school&amp;rdquo; implementation of comp function:</description></item><item><title>One more way to implement a carousel</title><link>https://ivan-demchenko.github.io/blog/one-more-way-to-implement-a-carousel/</link><pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/one-more-way-to-implement-a-carousel/</guid><description>There are lots of implementations of it: jQuery based, vanilla-js based, heavy and lightweight. Some even claim that their solution is the only one you might ever need. However, there will always be a situation when the existing solution simply doesn’t work.
Here, at AutoScout24 we just had such situation and we decided to implement our own Carousel. We called it showcar-carousel. Please, do not hesitate to check the code out on GitHub repo for showcar-carousel.</description></item></channel></rss>