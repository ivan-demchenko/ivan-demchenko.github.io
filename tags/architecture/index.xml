<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>architecture on Ivan's blog</title><link>https://ivan-demchenko.github.io/tags/architecture/</link><description>Recent content in architecture on Ivan's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 13 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ivan-demchenko.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Why I chose Elm for my side project</title><link>https://ivan-demchenko.github.io/blog/why-elm-is-language-of-choice/</link><pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/why-elm-is-language-of-choice/</guid><description>I built a browser extension using Elm - GoalMet - Achieve your goals. Even though Elm&amp;rsquo;s evolution is rather slow, the JS community can learn heaps from this wonderful language and its ecosystem. Here are the main reasons why I chose Elm for my side project.
Stable ecosystem Everything I learned about Elm 2-3 years ago still applies. Even though I used Elm for anything substantial around two years ago, I could jump in and be productive immediately.</description></item><item><title>Who cares about the underlying tech? Why bother?</title><link>https://ivan-demchenko.github.io/blog/who-cares-about-the-underlying-tech/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/who-cares-about-the-underlying-tech/</guid><description>I recently had a conversation about why I insist that JavaScript (and especially TypeScript) developers should learn from Rescript, Elm, Go, Rust, and other languages. A person asked me: &amp;ldquo;Who cares? Users don&amp;rsquo;t care what language you use to build your product. Often the business doesn&amp;rsquo;t care either! There are plenty of companies with tons of spaghetti code, and they sell their products well! So why bother?&amp;rdquo;
Well, I couldn&amp;rsquo;t spontaneously say why I care.</description></item><item><title>Model errors as data for better user and developer experience</title><link>https://ivan-demchenko.github.io/blog/models-errors-as-data/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/models-errors-as-data/</guid><description>A great product experience is when the product works as expected in the scenario it was designed for, and communicates with users in a meaningful way. As developers, we cannot control how and where our product will be used, or the user input. But we have the tools to guard the flow from unexpected inputs. In this post, I want to give two pieces of advice for people working in the JS ecosystem on how to create better programs.</description></item><item><title>Interfaces, good and bad</title><link>https://ivan-demchenko.github.io/blog/interfaces-good-bad/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/interfaces-good-bad/</guid><description>Designing applications can be a challenging task. Over the course of my career, I have developed a few guiding principles that I would like to share with you. These are more food for thought, rather than hard rules to follow.
Throughout this article, I use adjectives like &amp;ldquo;good&amp;rdquo; and &amp;ldquo;bad&amp;rdquo; - purely subjectively.
Why do we need interfaces? Public interfaces provide an overview of the capabilities of the module. If an interface and its methods have descriptive names (defined later), that interface can be a valuable addition to the documentation.</description></item><item><title>Dependencies on (front-end) frameworks</title><link>https://ivan-demchenko.github.io/blog/dependencies-on-frontend-frameworks/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/dependencies-on-frontend-frameworks/</guid><description>As modern front-end applications become increasingly complex, it is becoming more and more important to maintain the separation of concerns between the view layer and the business logic.
New toys, old problems Having seen several modern codebases, I can say that history is repeating itself. Back in the day, when PHP was growing in popularity, but the ecosystem was not mature enough, the separation of concerns was a hot topic. For example, rushing to deliver the working code on time, people would query or write to a database directly from the views.</description></item><item><title>Use Tailwind as CSS abstraction in CSS modules</title><link>https://ivan-demchenko.github.io/blog/use-tailwind-with-abstraction/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/use-tailwind-with-abstraction/</guid><description>Tailwind provides a solid base level, sort of a starting point for your application. The library is a set of utility CSS classes that use Custom CSS properties (a.k.a CSS variables). Some of these variables abstract away a default set of design tokens. As such, it is easy to create a dark theme (should a user prefer dark mode) or take some accessibility aspect into account (like reduced animations). I only described the tip of the iceberg.</description></item><item><title>UI library as a mono-repository. Part 3</title><link>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part3/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part3/</guid><description>As we progressed with our mono-repository endeavour, we noticed some weird behaviour. It worked like charm in the apps. But not in our Storybook. Besides, sometimes tests would fail for no obvious reason.
Storybook is a de-facto standard tool for developing and demonstrating your components in action in the real environment. We also used Jest for testing. So, naturally, we didn&amp;rsquo;t want to give them up. Seems like our setup is not finished yet.</description></item><item><title>UI library as a mono-repository. Part 2</title><link>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part2/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part2/</guid><description>Let&amp;rsquo;s talk about CSS files and modules. Unfortunately, they are often treated as if they were a second class entities. We need to fix this situation.
Treating CSS dependencies the way we treat other dependencies Let&amp;rsquo;s talk about the dependencies between UI components.
In JS files, we mark dependencies by import-ing or require-ing them. Packages clearly define dependencies in the package.json file. But a package is not only JS files, but also CSS files.</description></item><item><title>UI library as a mono-repository. Part 1</title><link>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part1/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://ivan-demchenko.github.io/blog/ui-lib-monorepo-part1/</guid><description>Welcome to the first instalment of the series dedicated to the re-architecture of a UI library. I helped my company to transition from the monolithic setup to a mono-repository by leading this project.
This is all very familiar It seems like this is a common topic these days: Deprecate monoliths and move toward micro-frontend/micro-service architecture.
However, many UI libraries start as a monolith. Meaning, there&amp;rsquo;s a single distribution for the whole library.</description></item></channel></rss>