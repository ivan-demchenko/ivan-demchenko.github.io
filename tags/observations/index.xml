<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Observations on Ivan's blog</title><link>https://raqystyle.github.io/tags/observations/</link><description>Recent content in Observations on Ivan's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 30 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://raqystyle.github.io/tags/observations/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript inherits all the flaws of JavaScript</title><link>https://raqystyle.github.io/blog/js-and-ts-are-flawed-languages/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/js-and-ts-are-flawed-languages/</guid><description>Being a big proponent of TypeScript, I keep noticing that this language inherits all the flaws of JavaScript. However, it doesn&amp;rsquo;t mean we have no choice.
The problem Consider a function that turns an object representing a URL into a string:
type UrlRecord = { protocol: string; host: string[]; } function urlToString(urlRecord: UrlRecord): string { const { protocol, host } = urlRecord; return `${protocol}://${host.join(&amp;#39;.&amp;#39;)}`; } This code snippet looks innocent and pretty solid.</description></item></channel></rss>