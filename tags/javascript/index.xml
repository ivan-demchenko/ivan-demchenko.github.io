<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>JavaScript on Ivan's blog</title><link>https://raqystyle.github.io/tags/javascript/</link><description>Recent content in JavaScript on Ivan's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 31 Aug 2022 12:33:54 +0200</lastBuildDate><atom:link href="https://raqystyle.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Is JavaScript OOP or Functional?</title><link>https://raqystyle.github.io/blog/is-js-oop-or-functional/</link><pubDate>Wed, 31 Aug 2022 12:33:54 +0200</pubDate><guid>https://raqystyle.github.io/blog/is-js-oop-or-functional/</guid><description>A colleague of mine asked a good question: does TypeScript make JavaScript a better OOP language? To answer this question, I decided to compare OOP JavaScript to its opposite, Functional JavaScript.
TypeScript has become crazy popular. Many people bet on it as a magical language that will solve their JavaScript problems. Well, it won&amp;rsquo;t. As Kyle Simpson described in his upcoming book, the quirks of JavaScript don&amp;rsquo;t disappear. In my opinion, we should not attribute any superpowers to TS apart from just helping developers to feel more confident in the larger codebase.</description></item></channel></rss>