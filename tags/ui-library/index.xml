<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>UI library on Ivan's blog</title><link>https://raqystyle.github.io/tags/ui-library/</link><description>Recent content in UI library on Ivan's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://raqystyle.github.io/tags/ui-library/index.xml" rel="self" type="application/rss+xml"/><item><title>The Freedom of Web Components or Why UI Libraries Should Embrace Framework-Agnostic Solutions</title><link>https://raqystyle.github.io/blog/web-components-for-ui-lib/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>https://raqystyle.github.io/blog/web-components-for-ui-lib/</guid><description>In the ever-evolving landscape of web development, the choice of tools and technologies can have a profound impact on the flexibility, scalability, and longevity of a code base. One critical decision that developers often face is whether to use a framework or embrace more framework-agnostic solutions like Web Components when building a UI library. In this post, we&amp;rsquo;ll explore why opting for Web Components can offer unparalleled advantages when it comes to ensuring flexibility and avoiding lock-in.</description></item></channel></rss>